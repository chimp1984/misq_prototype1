buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.10'
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
        classpath files('gradle/witness/gradle-witness.jar')
    }
}

configure(rootProject) {
    // remove the 'misq-*' scripts and 'lib' dir generated by the 'installDist' task
    task clean {
        doLast {
            delete fileTree(dir: rootProject.projectDir, include: 'misq-*'), 'lib'
        }
    }
}

/*plugins {
    id 'org.openjfx.javafxplugin' version '0.0.9'
}*/

configure(subprojects) {
    apply plugin: 'java'
    apply plugin: 'com.google.osdetector'

    sourceCompatibility = 1.10

    ext { // in alphabetical order
        findbugsVersion = '3.0.2'
        grpcVersion = '1.25.0'
        gsonVersion = '2.8.5'
        guavaVersion = '28.2-jre'
        guiceVersion = '4.2.2'
        jetbrainsAnnotationsVersion = '13.0'
        javafxVersion = '15'
        joptVersion = '5.0.4'
        jsonsimpleVersion = '1.1.1'
        junitVersion = '4.12'
        langVersion = '3.11'
        logbackVersion = '1.1.11'
        loggingVersion = '1.2'
        lombokVersion = '1.18.12'
        protobufVersion = '3.10.0'
        protocVersion = protobufVersion
        slf4jVersion = '1.7.30'

        i2pVersion = '0.9.49'
        netlayerVersion = '32779ac' // Commit ID from https://github.com/bisq-network/netlayer/commits/externaltor

        os = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
    }

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        testImplementation "junit:junit:$junitVersion"
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

configure([project(':common'),
           project(':torify'),
           project(':p2p'),
           project(':listing'),
           project(':finance'),
           project(':daemon'),
           project(':cli'),
           project(':jfx'),
           project(':web'),
           project(':scripts')]) {

    apply plugin: 'application'

    build.dependsOn installDist
    installDist.destinationDir = file('build/app')
    distZip.enabled = false

    // the 'installDist' and 'startScripts' blocks below configure misq executables to put
    // generated shell scripts in the root project directory, such that users can easily
    // discover and invoke e.g. ./misq-desktop, ./misq-seednode, etc.
    // See https://stackoverflow.com/q/46327736 for details.

    installDist {
        doLast {
            // copy generated shell scripts, e.g. `misq-desktop` directly to the project
            // root directory for discoverability and ease of use

            copy {
                from "$destinationDir/bin"
                into rootProject.projectDir
            }
            // copy libs required for generated shell script classpaths to 'lib' dir under
            // the project root directory
            copy {
                from "$destinationDir/lib"
                into "${rootProject.projectDir}/lib"
            }

            // edit generated shell scripts such that they expect to be executed in the
            // project root dir as opposed to a 'bin' subdirectory
            def windowsScriptFile = file("${rootProject.projectDir}/misq-${applicationName}.bat")
            windowsScriptFile.text = windowsScriptFile.text.replace(
                'set APP_HOME=%DIRNAME%..', 'set APP_HOME=%DIRNAME%')

            def unixScriptFile = file("${rootProject.projectDir}/misq-$applicationName")
            unixScriptFile.text = unixScriptFile.text.replace(
                'cd "`dirname \\"$PRG\\"`/.." >/dev/null', 'cd "`dirname \\"$PRG\\"`" >/dev/null')

            if (applicationName == 'desktop') {
                def script = file("${rootProject.projectDir}/misq-$applicationName")
                script.text = script.text.replace(
                    'DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-XX:MaxRAM=4g"')
            }

            if (applicationName == 'apitest') {
                // Pass the logback config file as a system property to avoid chatty
                // logback startup due to multiple logback.xml files in the classpath
                // (:daemon & :cli).
                def script = file("${rootProject.projectDir}/misq-$applicationName")
                script.text = script.text.replace(
                    'DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="' +
                    '-Dlogback.configurationFile=apitest/build/resources/main/logback.xml"')
            }

            if (osdetector.os != 'windows')
                delete fileTree(dir: rootProject.projectDir, include: 'misq-*.bat')
            else
                delete fileTree(dir: rootProject.projectDir, include: 'misq-*', exclude: '*.bat')
        }
    }

    startScripts {
        // rename scripts from, e.g. `desktop` to `misq-desktop`
        applicationName = "misq-$applicationName"
    }
}

configure(project(':common')) {
    dependencies {
        implementation "com.google.guava:guava:$guavaVersion"

        implementation "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
        implementation "com.google.code.findbugs:jsr305:$findbugsVersion"

        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        implementation "ch.qos.logback:logback-core:$logbackVersion"
        implementation "ch.qos.logback:logback-classic:$logbackVersion"

        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    }
}

configure(project(':torify')) {
    dependencies {
        implementation project(':common')
        implementation "com.google.guava:guava:$guavaVersion"

        compile("com.github.chimp1984:torify:3d568f03")

        implementation "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
        implementation "com.google.code.findbugs:jsr305:$findbugsVersion"

        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        implementation "ch.qos.logback:logback-core:$logbackVersion"
        implementation "ch.qos.logback:logback-classic:$logbackVersion"
    }
}

configure(project(':p2p')) {
    dependencies {
        implementation project(':common')
        implementation project(':torify')

        implementation "com.google.guava:guava:$guavaVersion"

        implementation("net.i2p:router:$i2pVersion")
        implementation("net.i2p.client:streaming:$i2pVersion")
        implementation("net.i2p.client:mstreaming:$i2pVersion")
        implementation("net.i2p:i2p:$i2pVersion")

        implementation("org.jeasy:easy-states:2.0.0")

        implementation "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
        implementation "com.google.code.findbugs:jsr305:$findbugsVersion"

        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        implementation "ch.qos.logback:logback-core:$logbackVersion"
        implementation "ch.qos.logback:logback-classic:$logbackVersion"
    }
}

configure(project(':listing')) {
    dependencies {
        implementation project(':common')
        implementation project(':p2p')

        implementation "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
        implementation "com.google.code.findbugs:jsr305:$findbugsVersion"

        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        implementation "ch.qos.logback:logback-core:$logbackVersion"
        implementation "ch.qos.logback:logback-classic:$logbackVersion"
    }
}

configure(project(':finance')) {
    dependencies {
        implementation project(':common')
        implementation project(':p2p')

        implementation "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
        implementation "com.google.code.findbugs:jsr305:$findbugsVersion"

        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        implementation "ch.qos.logback:logback-core:$logbackVersion"
        implementation "ch.qos.logback:logback-classic:$logbackVersion"
    }
}

configure(project(':daemon')) {
    mainClassName = 'misq.daemon.DaemonMain'

    dependencies {
        implementation project(':p2p')
        implementation "com.google.protobuf:protobuf-java:$protobufVersion"
        implementation("io.grpc:grpc-protobuf:$grpcVersion") {
            exclude(module: 'guava')
            exclude(module: 'animal-sniffer-annotations')
        }
        implementation("io.grpc:grpc-stub:$grpcVersion") {
            exclude(module: 'guava')
            exclude(module: 'animal-sniffer-annotations')
        }
        runtimeOnly("io.grpc:grpc-netty-shaded:$grpcVersion") {
            exclude(module: 'guava')
            exclude(module: 'animal-sniffer-annotations')
        }
    }
}

configure(project(':cli')) {
    mainClassName = 'misq.cli.CliMain'

    dependencies {
        implementation "net.sf.jopt-simple:jopt-simple:$joptVersion"
        implementation "com.google.protobuf:protobuf-java:$protobufVersion"
        implementation("io.grpc:grpc-core:$grpcVersion") {
            exclude(module: 'guava')
            exclude(module: 'animal-sniffer-annotations')
        }
        implementation("io.grpc:grpc-stub:$grpcVersion") {
            exclude(module: 'guava')
            exclude(module: 'animal-sniffer-annotations')
        }
        runtimeOnly("io.grpc:grpc-netty-shaded:$grpcVersion") {
            exclude(module: 'guava')
            exclude(module: 'animal-sniffer-annotations')
        }
    }
}

configure(project(':jfx')) {
    apply plugin: 'com.github.johnrengelman.shadow'
    /* apply plugin: 'witness'
     apply from: '../gradle/witness/gradle-witness.gradle'*/
    /*  apply from: 'package/package.gradle'*/

    version = '0.0.1-SNAPSHOT'

    jar.manifest.attributes(
        "Implementation-Title": project.name,
        "Implementation-Version": version)

    mainClassName = 'misq.jfx.JfxMain'

    tasks.withType(AbstractArchiveTask) {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    sourceSets.main.resources.srcDirs += ['src/main/java'] // to copy fxml and css files

    dependencies {
        implementation project(':common')
        implementation project(':p2p')

        implementation "org.openjfx:javafx-base:$javafxVersion:$os"
        implementation "org.openjfx:javafx-graphics:$javafxVersion:$os"
        implementation "org.openjfx:javafx-controls:$javafxVersion:$os"

        implementation "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
        implementation "com.google.code.findbugs:jsr305:$findbugsVersion"

        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        implementation "ch.qos.logback:logback-core:$logbackVersion"
        implementation "ch.qos.logback:logback-classic:$logbackVersion"
    }
}

configure(project(':web')) {
    dependencies {
    }
}
configure(project(':scripts')) {
    dependencies {
    }
}
